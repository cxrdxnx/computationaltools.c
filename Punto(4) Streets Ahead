#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX_N 100000
#define MAX_LEN 101

typedef struct {
    char nombre[MAX_LEN];
    int idx;
} Calle;

void merger(Calle arr[], Calle tmp[], int izq, int mid, int der) {
    int i = izq;
    int j = mid + 1;
    int k = izq;
    
    while (i <= mid && j <= der) {
        if (strcmp(arr[i].nombre, arr[j].nombre) <= 0) {
            tmp[k] = arr[i];
            i++;
        } else {
            tmp[k] = arr[j];
            j++;
        }
        k++;
    }
    
    while (i <= mid) {
        tmp[k] = arr[i];
        i++;
        k++;
    }
    
    while (j <= der) {
        tmp[k] = arr[j];
        j++;
        k++;
    }
    
    for (int x = izq; x <= der; x++) {
        arr[x] = tmp[x];
    }
}

void mergerSort(Calle arr[], Calle tmp[], int izq, int der) {
    if (izq < der) {
        int mid = izq + (der - izq) / 2;
        mergerSort(arr, tmp, izq, mid);
        mergerSort(arr, tmp, mid + 1, der);
        merger(arr, tmp, izq, mid, der);
    }
}

int buscarBinaria(Calle arr[], int n, char key[]) {
    int l = 0;
    int r = n - 1;
    
    while (l <= r) {
        int mid = l + (r - l) / 2;
        int cmp = strcmp(arr[mid].nombre, key);
        
        if (cmp == 0) {
            return arr[mid].idx;
        } else if (cmp < 0) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    return -1;
}

int main() {
    int n, q;
    
    scanf("%d %d", &n, &q);
    
    Calle arr[MAX_N];
    Calle tmp[MAX_N];
    
    for (int i = 0; i < n; i++) {
        scanf("%s", arr[i].nombre);
        arr[i].idx = i;
    }
    
    mergerSort(arr, tmp, 0, n - 1);
    
    for (int i = 0; i < q; i++) {
        char ini[MAX_LEN], fin[MAX_LEN];
        scanf("%s %s", ini, fin);
        
        int posIni = buscarBinaria(arr, n, ini);
        int posFin = buscarBinaria(arr, n, fin);
        
        if (posIni == -1 || posFin == -1) {
            printf("0\n");
        } else {
            int diff = abs(posIni - posFin);
            int res = diff - 1;
            printf("%d\n", res);
        }
    }
    
    return 0;
}
